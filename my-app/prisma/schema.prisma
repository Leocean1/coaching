generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model assignments {
  assignment_id   Int           @id @default(autoincrement())
  course_id       Int
  description     String?       @db.Text
  assignment_link String?       @db.VarChar(255)
  uploaded_by     Int?
  created_date    DateTime      @default(now()) @db.DateTime(0)
  courses         courses       @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "assignments_ibfk_1")
  users           users?        @relation(fields: [uploaded_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "assignments_ibfk_2")
  submissions     submissions[]

  @@index([course_id], map: "course_id")
  @@index([uploaded_by], map: "uploaded_by")
}

model courses {
  course_id        Int           @id @default(autoincrement())
  title            String        @db.VarChar(200)
  description      String?       @db.Text
  duration         String?       @db.VarChar(50)
  price            Decimal?      @db.Decimal(10, 2)
  created_date     DateTime      @default(now()) @db.DateTime(0)
  image            String?       @db.VarChar(255)
  intro_video_link String?       @db.VarChar(255)
  uploaded_by      Int?
  assignments      assignments[]
  users            users?        @relation(fields: [uploaded_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "courses_ibfk_1")
  employees        employees[]
  enrollments      enrollments[]
  videos           videos[]

  @@index([uploaded_by], map: "uploaded_by")
}

model employees {
  employee_id                        Int               @id @default(autoincrement())
  user_id                            Int
  course_id                          Int?
  gender                             employees_gender?
  address                            String?           @db.Text
  alternate_phone                    String?           @db.VarChar(20)
  current_class                      String?           @db.VarChar(50)
  documents                          String?           @db.VarChar(255)
  uploaded_by                        Int?
  created_date                       DateTime          @default(now()) @db.DateTime(0)
  users_employees_user_idTousers     users             @relation("employees_user_idTousers", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_1")
  courses                            courses?          @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_2")
  users_employees_uploaded_byTousers users?            @relation("employees_uploaded_byTousers", fields: [uploaded_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "employees_ibfk_3")

  @@index([course_id], map: "course_id")
  @@index([uploaded_by], map: "uploaded_by")
  @@index([user_id], map: "user_id")
}

model enrollments {
  enrollment_id   Int                 @id @default(autoincrement())
  course_id       Int
  user_id         Int
  gender          enrollments_gender?
  address         String?             @db.Text
  guardian_name   String?             @db.VarChar(100)
  alternate_phone String?             @db.VarChar(20)
  current_class   String?             @db.VarChar(50)
  created_date    DateTime            @default(now()) @db.DateTime(0)
  courses         courses             @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "enrollments_ibfk_1")
  users           users               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "enrollments_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([user_id], map: "user_id")
}

model submissions {
  submission_id   Int         @id @default(autoincrement())
  assignment_id   Int
  user_id         Int
  description     String?     @db.Text
  submission_link String?     @db.VarChar(255)
  created_date    DateTime    @default(now()) @db.DateTime(0)
  assignments     assignments @relation(fields: [assignment_id], references: [assignment_id], onDelete: NoAction, onUpdate: NoAction, map: "submissions_ibfk_1")
  users           users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "submissions_ibfk_2")

  @@index([assignment_id], map: "assignment_id")
  @@index([user_id], map: "user_id")
}

model users {
  user_id                                Int           @id @default(autoincrement())
  name                                   String        @db.VarChar(100)
  phone                                  String?       @db.VarChar(20)
  email                                  String        @unique(map: "email") @db.VarChar(100)
  dob                                    DateTime?     @db.Date
  created_date                           DateTime      @default(now()) @db.DateTime(0)
  profile_photo                          String?       @db.VarChar(255)
  password                               String        @db.VarChar(255)
  role                                   String?       @db.VarChar(50)
  assignments                            assignments[]
  courses                                courses[]
  employees_employees_user_idTousers     employees[]   @relation("employees_user_idTousers")
  employees_employees_uploaded_byTousers employees[]   @relation("employees_uploaded_byTousers")
  enrollments                            enrollments[]
  submissions                            submissions[]
  videos                                 videos[]
}

model videos {
  video_id     Int      @id @default(autoincrement())
  course_id    Int
  link         String   @db.VarChar(255)
  created_date DateTime @default(now()) @db.DateTime(0)
  uploaded_by  Int?
  courses      courses  @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "videos_ibfk_1")
  users        users?   @relation(fields: [uploaded_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "videos_ibfk_2")

  @@index([course_id], map: "course_id")
  @@index([uploaded_by], map: "uploaded_by")
}

enum enrollments_gender {
  Male
  Female
  Other
}

enum employees_gender {
  Male
  Female
  Other
}
